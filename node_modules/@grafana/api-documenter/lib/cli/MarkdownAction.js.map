{"version":3,"file":"MarkdownAction.js","sourceRoot":"","sources":["../../src/cli/MarkdownAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,6CAA0C;AAC1C,0EAAuE;AAEvE,0FAAuF;AAEvF,MAAa,cAAe,SAAQ,uBAAU;IAI5C,YAAmB,MAAgC;QACjD,KAAK,CAAC;YACJ,UAAU,EAAE,UAAU;YACtB,OAAO,EAAE,iDAAiD;YAC1D,aAAa,EACX,yDAAyD;gBACzD,yEAAyE;SAC5E,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC7C,iBAAiB,EAAE,QAAQ;YAC3B,WAAW,EAAE,yEAAyE;SACvF,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAClD,iBAAiB,EAAE,SAAS;YAC5B,WAAW,EAAE,sDAAsD;SACpE,CAAC,CAAC;IACL,CAAC;IAES,SAAS;QACjB,WAAW;QACX,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAExD,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE;YAC7B,MAAM,kBAAkB,GAA2B,IAAI,+CAAsB,CAAC;gBAC5E,KAAK,EAAE,QAAQ;gBACf,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,IAAI,KAAK;gBAC9C,MAAM,EAAE,YAAY;aACrB,CAAC,CAAC;YAEH,kBAAkB,CAAC,aAAa,EAAE,CAAC;YACnC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QAED,MAAM,kBAAkB,GAAuB,IAAI,uCAAkB,CAAC;YACpE,QAAQ;YACR,gBAAgB,EAAE,SAAS;YAC3B,YAAY;SACb,CAAC,CAAC;QACH,kBAAkB,CAAC,aAAa,EAAE,CAAC;QACnC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AAjDD,wCAiDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ApiDocumenterCommandLine } from './ApiDocumenterCommandLine';\r\nimport { BaseAction } from './BaseAction';\r\nimport { MarkdownDocumenter } from '../documenters/MarkdownDocumenter';\r\nimport { CommandLineFlagParameter } from '@rushstack/ts-command-line';\r\nimport { HugoMarkdownDocumenter } from '../documenters/grafana/HugoMarkdownDocumenter';\r\n\r\nexport class MarkdownAction extends BaseAction {\r\n  private _hugoParameter!: CommandLineFlagParameter;\r\n  private _hugoDraftParameter!: CommandLineFlagParameter;\r\n\r\n  public constructor(parser: ApiDocumenterCommandLine) {\r\n    super({\r\n      actionName: 'markdown',\r\n      summary: 'Generate documentation as Markdown files (*.md)',\r\n      documentation:\r\n        'Generates API documentation as a collection of files in' +\r\n        ' Markdown format, suitable for example for publishing on a GitHub site.'\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    super.onDefineParameters();\r\n    this._hugoParameter = this.defineFlagParameter({\r\n      parameterLongName: '--hugo',\r\n      description: `Enables some additional features specific to Grafana.com documentation.`\r\n    });\r\n    this._hugoDraftParameter = this.defineFlagParameter({\r\n      parameterLongName: '--draft',\r\n      description: `The documentation generated will be marked as draft.`\r\n    });\r\n  }\r\n\r\n  protected onExecute(): Promise<void> {\r\n    // override\r\n    const { apiModel, outputFolder } = this.buildApiModel();\r\n\r\n    if (this._hugoParameter.value) {\r\n      const markdownDocumenter: HugoMarkdownDocumenter = new HugoMarkdownDocumenter({\r\n        model: apiModel,\r\n        draft: this._hugoDraftParameter.value || false,\r\n        output: outputFolder\r\n      });\r\n\r\n      markdownDocumenter.generateFiles();\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const markdownDocumenter: MarkdownDocumenter = new MarkdownDocumenter({\r\n      apiModel,\r\n      documenterConfig: undefined,\r\n      outputFolder\r\n    });\r\n    markdownDocumenter.generateFiles();\r\n    return Promise.resolve();\r\n  }\r\n}\r\n"]}