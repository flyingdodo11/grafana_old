{"version":3,"file":"GrafanaMarkdownEmitter.js","sourceRoot":"","sources":["../../src/markdown/GrafanaMarkdownEmitter.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAG5B,mEAA+F;AAM/F,MAAa,sBAAuB,SAAQ,6CAAqB;IACrD,SAAS,CAAC,OAAgB,EAAE,OAAgC,EAAE,eAAwB;QAC9F,MAAM,MAAM,GAAmB,OAAO,CAAC,MAAM,CAAC;QAE9C,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;YAChC,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAChC;QAED,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IACrD,CAAC;IAEO,cAAc,CAAC,OAAgB;QACrC,MAAM,IAAI,GAAmB,OAAyB,CAAC;QACvD,OAAO,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,CAAC;IAC5C,CAAC;IAED,gBAAgB;IACN,+BAA+B,CACvC,UAAsB,EACtB,OAA+D;QAE/D,MAAM,OAAO,GAAkC,OAAO,CAAC,OAAO,CAAC;QAE/D,MAAM,MAAM,GAAuC,IAAI,CAAC,SAAS,CAAC,2BAA2B,CAC3F,UAAU,CAAC,eAAgB,EAC3B,OAAO,CAAC,cAAc,CACvB,CAAC;QAEF,IAAI,MAAM,CAAC,eAAe,EAAE;YAC1B,MAAM,QAAQ,GAAuB,OAAO,CAAC,uBAAuB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YAE7F,IAAI,QAAQ,EAAE;gBACZ,IAAI,QAAQ,GAAW,UAAU,CAAC,QAAQ,IAAI,EAAE,CAAC;gBACjD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;oBACzB,mEAAmE;oBACnE,QAAQ,GAAG,MAAM,CAAC,eAAe,CAAC,0BAA0B,EAAE,CAAC;iBAChE;gBACD,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;oBACvB,MAAM,eAAe,GAAW,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;oBAEnF,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC1B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;oBACtC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,QAAS,QAAQ,CAAC,CAAC;iBAC1D;qBAAM;oBACL,OAAO,CAAC,GAAG,CAAC,gBAAM,CAAC,MAAM,CAAC,wCAAwC,CAAC,CAAC,CAAC;iBACtE;aACF;SACF;aAAM,IAAI,MAAM,CAAC,YAAY,EAAE;YAC9B,OAAO,CAAC,GAAG,CACT,gBAAM,CAAC,MAAM,CACX,yCAAyC,UAAU,CAAC,eAAgB,CAAC,WAAW,EAAE,KAAK;gBACrF,MAAM,CAAC,YAAY,CACtB,CACF,CAAC;SACH;IACH,CAAC;CACF;AAxDD,wDAwDC","sourcesContent":["import colors from 'colors';\r\n\r\nimport { IResolveDeclarationReferenceResult } from '@microsoft/api-extractor-model';\r\nimport { CustomMarkdownEmitter, ICustomMarkdownEmitterOptions } from './CustomMarkdownEmitter';\r\nimport { DocNode, DocLinkTag } from '@microsoft/tsdoc';\r\nimport { IMarkdownEmitterContext } from './MarkdownEmitter';\r\nimport { GrafanaDocNode } from '../nodes/grafana/GrafanaDocNode';\r\nimport { IndentedWriter } from '../utils/IndentedWriter';\r\n\r\nexport class GrafanaMarkdownEmitter extends CustomMarkdownEmitter {\r\n  protected writeNode(docNode: DocNode, context: IMarkdownEmitterContext, docNodeSiblings: boolean): void {\r\n    const writer: IndentedWriter = context.writer;\r\n\r\n    if (this._isGrafanaNode(docNode)) {\r\n      return docNode.writeTo(writer);\r\n    }\r\n\r\n    super.writeNode(docNode, context, docNodeSiblings);\r\n  }\r\n\r\n  private _isGrafanaNode(docNode: DocNode): docNode is GrafanaDocNode {\r\n    const node: GrafanaDocNode = docNode as GrafanaDocNode;\r\n    return node && node.writeTo !== undefined;\r\n  }\r\n\r\n  /** @override */\r\n  protected writeLinkTagWithCodeDestination(\r\n    docLinkTag: DocLinkTag,\r\n    context: IMarkdownEmitterContext<ICustomMarkdownEmitterOptions>\r\n  ): void {\r\n    const options: ICustomMarkdownEmitterOptions = context.options;\r\n\r\n    const result: IResolveDeclarationReferenceResult = this._apiModel.resolveDeclarationReference(\r\n      docLinkTag.codeDestination!,\r\n      options.contextApiItem\r\n    );\r\n\r\n    if (result.resolvedApiItem) {\r\n      const filename: string | undefined = options.onGetFilenameForApiItem(result.resolvedApiItem);\r\n\r\n      if (filename) {\r\n        let linkText: string = docLinkTag.linkText || '';\r\n        if (linkText.length === 0) {\r\n          // Generate a name such as Namespace1.Namespace2.MyClass.myMethod()\r\n          linkText = result.resolvedApiItem.getScopedNameWithinPackage();\r\n        }\r\n        if (linkText.length > 0) {\r\n          const encodedLinkText: string = this.getEscapedText(linkText.replace(/\\s+/g, ' '));\r\n\r\n          context.writer.write('[');\r\n          context.writer.write(encodedLinkText);\r\n          context.writer.write(`]({{< relref \"${filename!}\" >}})`);\r\n        } else {\r\n          console.log(colors.yellow('WARNING: Unable to determine link text'));\r\n        }\r\n      }\r\n    } else if (result.errorMessage) {\r\n      console.log(\r\n        colors.yellow(\r\n          `WARNING: Unable to resolve reference \"${docLinkTag.codeDestination!.emitAsTsdoc()}\": ` +\r\n            result.errorMessage\r\n        )\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}